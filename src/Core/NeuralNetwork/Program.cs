using System;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Domain.AggregatesModel.AccountAggregate;
using Domain.AggregatesModel.ChartAggregate;
using Domain.AggregatesModel.InstrumentsAggregate;
using Infrastructure.Repository.Account;
using Infrastructure.Repository.Chart;
using Infrastructure.Repository.InstrumentRepository;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;

namespace BackGroundServiceConsole
{
    class Program
    {
        private static IInstrumentRepository _instrumentRepository;
        private static IChartRepository _chartRepository;
        private static IAccountRepository _accountRepository;
        static void Main(string[] args)
        {
            RegisterDependecies();
            Console.ReadLine();
        }

        public static string run_cmd(string cmd, string args)
        {
            ProcessStartInfo start = new ProcessStartInfo();
            start.FileName = @"predictNextMove.py";
            start.Arguments = string.Format("\"{0}\" \"{1}\"", cmd, args);
            start.UseShellExecute = false;// Do not use OS shell
            start.CreateNoWindow = true; // We don't need new window
            start.RedirectStandardOutput = true;// Any output, generated by application will be redirected back
            start.RedirectStandardError = true; // Any error in standard output will be redirected back (for example exceptions)
            using (Process process = Process.Start(start))
            {
                using (StreamReader reader = process.StandardOutput)
                {
                    string stderr = process.StandardError.ReadToEnd(); // Here are the exceptions from our Python script
                    string result = reader.ReadToEnd(); // Here is the result of StdOut(for example: print "test")
                    return result;
                }
            }
        }

        public static async void Bash()
        {
            var stringArray = string.Empty;
            var symbol = "DE30";
            var interval = "M1";

            var instrument = await _instrumentRepository.GetInstrument(symbol);
            var chart = await _chartRepository.GetChartAsync(symbol, interval, 200, instrument.Precision);
            var quotations = chart.Quotations.Skip(chart.Quotations.Count - 120).ToList(); ;

            foreach (var item in quotations)
            {
                stringArray += $"{item.Close}/{item.Open}/{item.Low}/{item.High}/{item.Volume}/{item.Time} ";
            }

            var process = new Process
            {
                StartInfo = new ProcessStartInfo
                {
                    FileName = "cmd.exe",
                    RedirectStandardInput = true,
                    UseShellExecute = false,
                    RedirectStandardOutput = true,
                }
            };
            process.Start();
            // Pass multiple commands to cmd.exe
            using (var sw = process.StandardInput)
            {
                if (sw.BaseStream.CanWrite)
                {
                    // Vital to activate Anaconda
                    sw.WriteLine(@"C:\Users\pawel\Anaconda3\Scripts\activate.bat");
                    // Activate your environment
                    sw.WriteLine("activate test4");
                    // run your script. You can also pass in arguments
                    sw.WriteLine($@"redictNextMove.py {stringArray}");
                }
            }

            while (!process.StandardOutput.EndOfStream)
            {
                var line = process.StandardOutput.ReadLine();
                Console.WriteLine(line);
                if (line.Contains("BUY"))
                {
                    await _accountRepository.MakeTransactionBuyAsync(30, 8, (double)1, instrument, "M1");
                }
                else if (line.Contains("SELL"))
                {
                    await _accountRepository.MakeTransactionSellAsync(30, 8, (double)1, instrument, "M1");
                }
            }
            Console.ReadKey();
        }

        private static void RegisterDependecies()
        {
            var serviceProvider = new ServiceCollection()
                .AddLogging()
                .AddSingleton<IAccountRepository, AccountRepository>()
                .AddSingleton<IInstrumentRepository, InstrumentRepository>()
                .AddSingleton<IChartRepository, ChartRepository>()
                .BuildServiceProvider();

            serviceProvider
                .GetService<ILoggerFactory>();

            var logger = serviceProvider.GetService<ILoggerFactory>()
                .CreateLogger<Program>();
            logger.LogDebug("Starting application");

            _accountRepository = serviceProvider.GetService<IAccountRepository>();
            _instrumentRepository = serviceProvider.GetService<IInstrumentRepository>();
            _chartRepository = serviceProvider.GetService<IChartRepository>();
        }
    }
}
